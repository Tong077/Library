@model IPagedList<Library.Models.BorrowDetailView>
@using X.PagedList.Mvc.Core
@using X.PagedList
@inject IHttpContextAccessor _context
@{
    var permissions = _context.HttpContext.Session.GetString("UserPermission")?.Split(',') ?? new string[0];
    var add = permissions.Contains("Create");
    var edit = permissions.Contains("Edit");
    var delete = permissions.Contains("Delete");
}



<style>
    .separator {
        border-bottom: 1px solid #ddd; /* Light gray border */
        margin: 20px 0; /* Margin to give space above and below the line */
    }
</style>
<div class="card">
    <div class="card-header">
        <h2 class="card-title"> Borrow Detail</h2>
    </div>
    <form asp-action="Index" asp-controller="BorrowDetial" style="justify-content:center">
        <div class="row">
            <div class="col-md-8 ml-5">
                <input class="form-control" type="text" name="searchTerm" value="@ViewBag.SearchTerm" placeholder="Search..." />
            </div>
            <div class="col-md-3">
                <button class="btn btn-success" type="submit">Search</button>
                <a asp-action="Index" class="btn btn-danger">Cancel</a>
            </div>
        </div>

    </form>
    <!-- Separator Line -->
    <div class="separator"></div>

    <div class="card-body">
        <div class="card-title gap-2">
            @if (add)
            {
                <p>
                    <a asp-action="Create" class="btn btn-success btn-sm float-right"> Add New Borrow</a>
                </p>
            }
        </div>
        <table class="table table-responsive table-condensed">
            <thead>
                <tr>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().CustomerName)
                    </th>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().LibrarianName)
                    </th>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().BookCode)
                    </th>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().BorrowDate)
                    </th>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().Duedate)
                    </th>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().ReturnDate)
                    </th>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().Depositamount)
                    </th>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().FineAmount)
                    </th>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().Note)
                    </th>
                    <th class="fst-italic">
                        @Html.DisplayNameFor(model => model.First().IsReturn)
                    </th>
                    <th class="fst-italic">
                        Action
                    </th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(model => item.CustomerName)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.LibrarianName)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.BookCode)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.BorrowDate)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.Duedate)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.ReturnDate)
                        </td>
                        <td style="text-align: right; color: green; font-weight: bold;">
                            @Html.DisplayFor(model => item.Depositamount)
                        </td>

                        <td style="text-align: right; color: green; font-weight: bold;">

                            @Html.DisplayFor(model => item.FineAmount)
                        </td>
                        <td>
                            @Html.DisplayFor(model => item.Note)
                        </td>
                        <td>
                            <form asp-action="UpdateIsReturn" asp-controller="BorrowDetial" method="post">
                                <input type="hidden" name="BorrowDetailId" value="@item.BorrowDetailId" />
                                <input type="checkbox" name="IsReturn" onchange="this.form.submit()" @(item.IsReturn ? "checked" : "") />
                            </form>
                        </td>
                        <td>
                            @if (edit)
                            {
                                <a asp-action="Edit" asp-controller="BorrowDetial" asp-route-BorrowDetailId="@item.BorrowDetailId" asp-route-BorrowId="@item.BorrowId" class="btn btn-sm btn-success">Edit</a>
                            }
                            @if (delete)
                            {
                                <a asp-action="Delete" asp-controller="BorrowDetial" asp-route-BorrowDetailId="@item.BorrowDetailId" asp-route-BorrowId="@item.BorrowId" class="btn btn-sm btn-danger">Delete</a>
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        @Html.PagedListPager(Model, page => Url.Action("Index", new { page }), new PagedListRenderOptions
   {
       DisplayLinkToFirstPage = PagedListDisplayMode.Always,
       DisplayLinkToLastPage = PagedListDisplayMode.Always,
       DisplayLinkToPreviousPage = PagedListDisplayMode.Always,
       DisplayLinkToNextPage = PagedListDisplayMode.Always,
       Display = PagedListDisplayMode.IfNeeded,
       PageClasses = new[] { "page-link" },
       LinkToPreviousPageFormat = "Previous",
       LinkToNextPageFormat = "Next",
       LinkToFirstPageFormat = "First",
       LinkToLastPageFormat = "Last"
   })
    </div>
</div>
